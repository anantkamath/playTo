/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p RendererDeviceIface -c RendererDeviceIface introspection/com.intel.dLeynaRenderer.RendererDevice.xml -N
 *
 * qdbusxml2cpp is Copyright (C) 2015 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef RENDERERDEVICEIFACE_H
#define RENDERERDEVICEIFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.intel.dLeynaRenderer.RendererDevice
 */
class RendererDeviceIface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.intel.dLeynaRenderer.RendererDevice"; }

public:
    RendererDeviceIface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~RendererDeviceIface();

    Q_PROPERTY(QStringList DeviceClasses READ deviceClasses)
    inline QStringList deviceClasses() const
    { return qvariant_cast< QStringList >(property("DeviceClasses")); }

    Q_PROPERTY(QString DeviceType READ deviceType)
    inline QString deviceType() const
    { return qvariant_cast< QString >(property("DeviceType")); }

    Q_PROPERTY(QString FriendlyName READ friendlyName)
    inline QString friendlyName() const
    { return qvariant_cast< QString >(property("FriendlyName")); }

    Q_PROPERTY(QString IconURL READ iconURL)
    inline QString iconURL() const
    { return qvariant_cast< QString >(property("IconURL")); }

    Q_PROPERTY(QString Manufacturer READ manufacturer)
    inline QString manufacturer() const
    { return qvariant_cast< QString >(property("Manufacturer")); }

    Q_PROPERTY(QString ManufacturerUrl READ manufacturerUrl)
    inline QString manufacturerUrl() const
    { return qvariant_cast< QString >(property("ManufacturerUrl")); }

    Q_PROPERTY(QString ModelDescription READ modelDescription)
    inline QString modelDescription() const
    { return qvariant_cast< QString >(property("ModelDescription")); }

    Q_PROPERTY(QString ModelName READ modelName)
    inline QString modelName() const
    { return qvariant_cast< QString >(property("ModelName")); }

    Q_PROPERTY(QString ModelNumber READ modelNumber)
    inline QString modelNumber() const
    { return qvariant_cast< QString >(property("ModelNumber")); }

    Q_PROPERTY(QString PresentationURL READ presentationURL)
    inline QString presentationURL() const
    { return qvariant_cast< QString >(property("PresentationURL")); }

    Q_PROPERTY(QString ProtocolInfo READ protocolInfo)
    inline QString protocolInfo() const
    { return qvariant_cast< QString >(property("ProtocolInfo")); }

    Q_PROPERTY(QString SerialNumber READ serialNumber)
    inline QString serialNumber() const
    { return qvariant_cast< QString >(property("SerialNumber")); }

    Q_PROPERTY(QString UDN READ uDN)
    inline QString uDN() const
    { return qvariant_cast< QString >(property("UDN")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Cancel()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Cancel"), argumentList);
    }

    inline QDBusPendingReply<QByteArray, QString> GetIcon(const QString &RequestedMimeType, const QString &Resolution)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(RequestedMimeType) << QVariant::fromValue(Resolution);
        return asyncCallWithArgumentList(QStringLiteral("GetIcon"), argumentList);
    }
    inline QDBusReply<QByteArray> GetIcon(const QString &RequestedMimeType, const QString &Resolution, QString &MimeType)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(RequestedMimeType) << QVariant::fromValue(Resolution);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("GetIcon"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            MimeType = qdbus_cast<QString>(reply.arguments().at(1));
        }
        return reply;
    }

Q_SIGNALS: // SIGNALS
};

#endif
