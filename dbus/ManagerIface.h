/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p ManagerIface -c ManagerIface introspection/com.intel.dLeynaRenderer.Manager.xml -N
 *
 * qdbusxml2cpp is Copyright (C) 2015 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef MANAGERIFACE_H
#define MANAGERIFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.intel.dLeynaRenderer.Manager
 */
class ManagerIface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.intel.dLeynaRenderer.Manager"; }

public:
    ManagerIface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ManagerIface();

    Q_PROPERTY(QStringList NeverQuit READ neverQuit WRITE setNeverQuit)
    inline QStringList neverQuit() const
    { return qvariant_cast< QStringList >(property("NeverQuit")); }
    inline void setNeverQuit(const QStringList &value)
    { setProperty("NeverQuit", QVariant::fromValue(value)); }

    Q_PROPERTY(bool WhiteListEnabled READ whiteListEnabled WRITE setWhiteListEnabled)
    inline bool whiteListEnabled() const
    { return qvariant_cast< bool >(property("WhiteListEnabled")); }
    inline void setWhiteListEnabled(bool value)
    { setProperty("WhiteListEnabled", QVariant::fromValue(value)); }

    Q_PROPERTY(QStringList WhiteListEntries READ whiteListEntries WRITE setWhiteListEntries)
    inline QStringList whiteListEntries() const
    { return qvariant_cast< QStringList >(property("WhiteListEntries")); }
    inline void setWhiteListEntries(const QStringList &value)
    { setProperty("WhiteListEntries", QVariant::fromValue(value)); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QList<QDBusObjectPath> > GetRenderers()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetRenderers"), argumentList);
    }

    inline QDBusPendingReply<QString> GetVersion()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetVersion"), argumentList);
    }

    inline QDBusPendingReply<> Release()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Release"), argumentList);
    }

    inline QDBusPendingReply<> Rescan()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Rescan"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void FoundRenderer(const QDBusObjectPath &Path);
    void LostRenderer(const QDBusObjectPath &Path);
};

#endif
